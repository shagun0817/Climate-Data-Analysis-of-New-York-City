# -*- coding: utf-8 -*-
"""climate-data-newyork.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cbv74nmcSUGxTjlruAluyXxzCnUYauUC

# Data Analysis(Climate conditions) of NewYork state
> Complete Data Analysis and Data Visualization......

# Statistics...
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current sessio

"""> Attributes and Data columns in Dataset"""

import pandas as pd
import matplotlib.pyplot as plt

# Load daily data with explicit date parsing and handling non-numeric values
daily_data = pd.read_csv('/content/daily_data.csv', parse_dates=['DATE'], na_values=['SOD', 'PRECIP', 'other_non_numeric_values'])

# Display the first few rows
print("Daily Data:")
print(daily_data.head())

"""> Basic Statistics..."""

# Basic statistics
print("\nBasic Statistics:")
print(daily_data.describe())

"""> Monthly Aggregation..."""

import pandas as pd

# Load the daily dataset
daily_data = pd.read_csv('/content/daily_data.csv', parse_dates=['DATE'], na_values=['s', 'T', 'M'])
# Create a new column for the month
daily_data['Month'] = daily_data['DATE'].dt.month

# Calculate average temperature and precipitation per month
monthly_aggregations = daily_data.groupby('Month').agg({'DailyAverageDryBulbTemperature': 'mean', 'DailyPrecipitation': 'sum'})

# Display monthly aggregations
print("Monthly Aggregations:")
print(monthly_aggregations)

"""> Average Daily Temperature.."""

# Example Pandas query
average_daily_temperature = daily_data.groupby('DATE')['DailyAverageDryBulbTemperature'].mean()
print("Average Daily Temperature:")
print(average_daily_temperature)

"""> Extreme Temperature Days.."""

# Identify days with extreme temperatures (e.g., above 90°F)
extreme_temperature_days = daily_data[daily_data['DailyMaximumDryBulbTemperature'] > 90]

# Display information about extreme temperature days
print("Extreme Temperature Days:")
print(extreme_temperature_days[['DATE', 'DailyMaximumDryBulbTemperature']])

"""#  Data Visualization Before Merging all datasets......"""

# Visualize precipitation over time
plt.figure(figsize=(12, 6))
plt.plot(daily_data['DATE'], daily_data['DailyPrecipitation'], label='Daily Precipitation')
plt.title('Daily Precipitation Trends')
plt.xlabel('Date')
plt.ylabel('Precipitation (inches)')
plt.legend()
plt.show()

# Visualize humidity over time
plt.figure(figsize=(12, 6))
plt.plot(daily_data['DATE'], daily_data['DailyAverageRelativeHumidity'], label='Daily Average Relative Humidity')
plt.title('Daily Average Relative Humidity Trends')
plt.xlabel('Date')
plt.ylabel('Relative Humidity (%)')
plt.legend()
plt.show()

# Visualize wind speed over time
plt.figure(figsize=(12, 6))
plt.plot(daily_data['DATE'], daily_data['DailyAverageWindSpeed'], label='Daily Average Wind Speed')
plt.title('Daily Average Wind Speed Trends')
plt.xlabel('Date')
plt.ylabel('Wind Speed (mph)')
plt.legend()
plt.show()

# Visualize trends over time
plt.figure(figsize=(12, 6))
plt.plot(daily_data['DATE'], daily_data['DailyAverageDryBulbTemperature'], label='Daily Average Temperature')
plt.title('Daily Average Temperature Trends')
plt.xlabel('Date')
plt.ylabel('Temperature (°F)')
plt.legend()
plt.show()

"""> Distribution of Wind Directions.."""

# Visualize distribution of wind directions
plt.figure(figsize=(12, 6))
plt.hist(daily_data['DailyPeakWindDirection'].dropna(), bins=360, range=(0, 360), density=True, alpha=0.7)
plt.title('Distribution of Daily Peak Wind Directions')
plt.xlabel('Wind Direction (degrees)')
plt.ylabel('Density')
plt.show()

"""> Trends in Sunrise and Sunset"""

# Load daily data with explicit date parsing and handling non-numeric values
daily_data = pd.read_csv('/content/daily_data.csv', parse_dates=['DATE'], na_values=['SOD  ', 'PRECIP', 'other_non_numeric_values'])

# Convert 'Sunrise' and 'Sunset' columns to datetime format
daily_data['Sunrise'] = pd.to_datetime(daily_data['Sunrise'], errors='coerce')
daily_data['Sunset'] = pd.to_datetime(daily_data['Sunset'], errors='coerce')

# Extract hour from sunrise and sunset times
daily_data['Sunrise_Hour'] = daily_data['Sunrise'].dt.hour
daily_data['Sunset_Hour'] = daily_data['Sunset'].dt.hour

# Visualize trends in sunrise and sunset times
plt.figure(figsize=(12, 6))
plt.plot(daily_data['DATE'], daily_data['Sunrise_Hour'], label='Sunrise Hour')
plt.plot(daily_data['DATE'], daily_data['Sunset_Hour'], label='Sunset Hour')
plt.title('Sunrise and Sunset Trends')
plt.xlabel('Date')
plt.ylabel('Hour of Day')
plt.legend()
plt.show()

"""> Distribution of Daily Precipitation."""

# Visualize the distribution of daily precipitation
plt.figure(figsize=(12, 6))
plt.hist(daily_data['DailyPrecipitation'].dropna(), bins=30, edgecolor='black')
plt.title('Distribution of Daily Precipitation')
plt.xlabel('Precipitation (inches)')
plt.ylabel('Frequency')
plt.show()

"""> Montly Average temperature.."""

# Create a new column for the month
daily_data['Month'] = daily_data['DATE'].dt.month

# Calculate average temperature per month
monthly_temperature = daily_data.groupby('Month')['DailyAverageDryBulbTemperature'].mean()

# Visualize trends in monthly average temperature
plt.figure(figsize=(12, 6))
plt.plot(monthly_temperature.index, monthly_temperature.values, marker='o')
plt.title('Monthly Average Temperature Trends')
plt.xlabel('Month')
plt.ylabel('Average Temperature (°F)')
plt.show()

"""> Distribution of daily average wind speed.."""

# Visualize the distribution of daily average wind speed
plt.figure(figsize=(12, 6))
plt.hist(daily_data['DailyAverageWindSpeed'].dropna(), bins=30, edgecolor='black')
plt.title('Distribution of Daily Average Wind Speed')
plt.xlabel('Wind Speed (mph)')
plt.ylabel('Frequency')
plt.show()

"""> Daily Temperature Range."""

# Calculate daily temperature range
daily_data['TemperatureRange'] = daily_data['DailyMaximumDryBulbTemperature'] - daily_data['DailyMinimumDryBulbTemperature']

# Visualize trends in daily temperature range
plt.figure(figsize=(12, 6))
plt.plot(daily_data['DATE'], daily_data['TemperatureRange'], label='Daily Temperature Range')
plt.title('Daily Temperature Range Trends')
plt.xlabel('Date')
plt.ylabel('Temperature Range (°F)')
plt.legend()
plt.show()

"""> Seasonal Average Temperature.."""

# Extract the season from the date (e.g., Winter, Spring, Summer, Fall)
daily_data['Season'] = (daily_data['DATE'].dt.month % 12 + 3) // 3

# Calculate average temperature per season
seasonal_temperature = daily_data.groupby('Season')['DailyAverageDryBulbTemperature'].mean()

# Visualize trends in seasonal average temperature
plt.figure(figsize=(12, 6))
plt.plot(seasonal_temperature.index, seasonal_temperature.values, marker='o')
plt.title('Seasonal Average Temperature Trends')
plt.xlabel('Season')
plt.ylabel('Average Temperature (°F)')
plt.xticks([1, 2, 3, 4], ['Winter', 'Spring', 'Summer', 'Fall'])
plt.show()

"""> Daily Snowfall"""

# Visualize the distribution of daily snowfall
plt.figure(figsize=(12, 6))
plt.hist(daily_data['DailySnowfall'].dropna(), bins=30, edgecolor='black')
plt.title('Distribution of Daily Snowfall')
plt.xlabel('Snowfall (inches)')
plt.ylabel('Frequency')
plt.show()

"""> Average Monthly Wind Speed.."""

# Calculate average monthly wind speed
monthly_wind_speed = daily_data.groupby(daily_data['DATE'].dt.to_period("M"))['DailyAverageWindSpeed'].mean()

# Visualize trends in monthly average wind speed
plt.figure(figsize=(12, 6))
plt.bar(monthly_wind_speed.index.astype(str), monthly_wind_speed.values)
plt.title('Monthly Average Wind Speed Trends')
plt.xlabel('Month')
plt.ylabel('Average Wind Speed (mph)')
plt.show()

"""> Montly  Precipitation"""

# Calculate total monthly precipitation
monthly_precipitation = daily_data.groupby(daily_data['DATE'].dt.to_period("M"))['DailyPrecipitation'].sum()

# Visualize trends in monthly precipitation
plt.figure(figsize=(12, 6))
plt.bar(monthly_precipitation.index.astype(str), monthly_precipitation.values)
plt.title('Monthly Total Precipitation Trends')
plt.xlabel('Month')
plt.ylabel('Total Precipitation (inches)')
plt.show()

"""> Daily precipitation VS Daily Average Temperature"""

# Scatter plot of daily precipitation vs. daily average temperature
plt.figure(figsize=(12, 6))
plt.scatter(daily_data['DailyAverageDryBulbTemperature'], daily_data['DailyPrecipitation'], alpha=0.5)
plt.title('Daily Precipitation vs. Daily Average Temperature')
plt.xlabel('Daily Average Temperature (°F)')
plt.ylabel('Daily Precipitation (inches)')
plt.show()

"""# Merging#
> common columns
"""

import pandas as pd

# Load the datasets from Kaggle paths
daily_data = pd.read_csv('/content/daily_data.csv', na_values=['SOD  ', 'PRECIP', 'other_non_numeric_values'])
hourly_data = pd.read_csv('/content/hourly_data.csv', na_values=['SOD  ', 'PRECIP', 'other_non_numeric_values'])
monthly_data = pd.read_csv('/content/monthly_data.csv', na_values=['SOD  ', 'PRECIP', 'other_non_numeric_values'])
three_hour_data = pd.read_csv('/content/three_hour_data.csv', na_values=['SOD  ', 'PRECIP', 'other_non_numeric_values'])

# Identify common columns among datasets
common_columns = set(daily_data.columns) & set(hourly_data.columns) & set(monthly_data.columns) & set(three_hour_data.columns)

# Print common columns
print("Common columns:", common_columns)

import pandas as pd
# Load the datasets from Kaggle paths
daily_data = pd.read_csv('/content/daily_data.csv', parse_dates=['DATE'], na_values=['SOD  ', 'PRECIP', 'other_non_numeric_values'])
hourly_data = pd.read_csv('/content/hourly_data.csv', parse_dates=['DATE'], na_values=['SOD  ', 'PRECIP', 'other_non_numeric_values'])
monthly_data = pd.read_csv('/content/monthly_data.csv', parse_dates=['DATE'], na_values=['SOD  ', 'PRECIP', 'other_non_numeric_values'])
three_hour_data = pd.read_csv('/content/three_hour_data.csv', parse_dates=['DATE'], na_values=['SOD  ', 'PRECIP', 'other_non_numeric_values'])
# Merge the datasets based on 'DATE' with different suffixes
merged_data = pd.merge(daily_data, hourly_data, on='DATE', how='outer', suffixes=('_daily', '_hourly'))
merged_data = pd.merge(merged_data, monthly_data, on='DATE', how='outer', suffixes=('_merged', '_monthly'))
merged_data = pd.merge(merged_data, three_hour_data, on='DATE', how='outer', suffixes=('_merged', '_three_hour'))
# Display the merged dataset
print("Merged Dataset:")
print(merged_data.head())
# Identify columns with mixed types in hourly_data
mixed_type_columns = hourly_data.iloc[:, [11, 12]].columns
print("Columns with mixed types in hourly_data:", mixed_type_columns)
# Print data types of those columns
print("Data types of columns with mixed types:")
print(hourly_data[mixed_type_columns].dtypes)

"""> Datatypes of Columns.."""

# Identify columns with mixed types in hourly_data
mixed_type_columns = hourly_data.iloc[:, [11, 12]].columns
print("Columns with mixed types in hourly_data:", mixed_type_columns)

# Print data types of those columns
print("Data types of columns with mixed types:")
print(hourly_data[mixed_type_columns].dtypes)

"""# After Merging.......

> Check for Missing Values..
"""

# Check for missing values
missing_values = merged_data.isnull().sum()
print("Missing Values:")
print(missing_values)

"""> Summary Statistics..."""

# Summary statistics
summary_stats = merged_data.describe()
print("Summary Statistics:")
print(summary_stats)

"""# Data Visuals..
> Daily Average Temperature over time.
"""

import matplotlib.pyplot as plt

# Example: Daily Average Temperature over time
plt.figure(figsize=(12, 6))
plt.plot(merged_data['DATE'], merged_data['DailyAverageWetBulbTemperature'], label='Daily Average Temperature')
plt.xlabel('Date')
plt.ylabel('Temperature')
plt.title('Daily Average Temperature Over Time')
plt.legend()
plt.show()

"""> Time Series of Daily Average Temperature."""

# Assuming you have loaded the merged_data DataFrame

# Plot the time series of daily average temperature
plt.figure(figsize=(14, 7))
plt.plot(merged_data.index, merged_data['DailyAverageDryBulbTemperature'], label='Daily Average Temperature')
plt.xlabel('Date')
plt.ylabel('Temperature (°F)')
plt.title('Time Series of Daily Average Temperature')
plt.legend()
plt.show()

"""> Distribution of Wind"""

# Analyze and visualize the distribution of wind speed
plt.figure(figsize=(14, 7))
plt.hist(merged_data['DailyAverageWindSpeed'], bins=30, color='green', alpha=0.7)
plt.xlabel('Daily Average Wind Speed (mph)')
plt.ylabel('Frequency')
plt.title('Distribution of Daily Average Wind Speed')
plt.show()

"""> Prevailing Direction.."""

# Identify and visualize the prevailing wind direction
plt.figure(figsize=(14, 7))
plt.bar(merged_data['DailyPeakWindDirection'].value_counts().index, merged_data['DailyPeakWindDirection'].value_counts().values, color='orange')
plt.xlabel('Wind Direction')
plt.ylabel('Frequency')
plt.title('Distribution of Prevailing Wind Direction')
plt.show()

"""> Total Snowfall.."""

import seaborn as sns
monthly_snowfall = daily_data.groupby(daily_data['DATE'].dt.month)['DailySnowfall'].sum().reset_index()

plt.figure(figsize=(12, 6))
sns.barplot(x='DATE', y='DailySnowfall', data=monthly_snowfall)
plt.title('Total Snowfall for Each Month')
plt.xlabel('Month')
plt.ylabel('Total Snowfall (inches)')
plt.show()

"""> Distribution Of weather sources.."""

source_distribution = daily_data['SOURCE'].value_counts()

plt.figure(figsize=(8, 8))
plt.pie(source_distribution, labels=source_distribution.index, autopct='%1.1f%%', startangle=90)
plt.title('Distribution of Weather Sources')
plt.show()

# Check data types of specific columns
print(hourly_data[['HourlyDewPointTemperature', 'HourlyDryBulbTemperature']].dtypes)

# Unique values in the 'REPORT_TYPE' column for each dataset
unique_conditions_daily = daily_data['REPORT_TYPE'].unique()
unique_conditions_hourly = hourly_data['REPORT_TYPE'].unique()
unique_conditions_three_hour = three_hour_data['REPORT_TYPE'].unique()

# Combine unique conditions from all datasets
all_unique_conditions = set(unique_conditions_daily) | set(unique_conditions_hourly) | set(unique_conditions_three_hour)

# Print the unique weather conditions
print("Unique Weather Conditions:")
for condition in all_unique_conditions:
    print(condition)

import matplotlib.pyplot as plt

# Assuming daily_data, hourly_data, and three_hour_data are your DataFrames
# Replace 'REPORT_TYPE' with the actual column name in your datasets
report_types_daily = daily_data['REPORT_TYPE'].value_counts()
report_types_hourly = hourly_data['REPORT_TYPE'].value_counts()
report_types_three_hour = three_hour_data['REPORT_TYPE'].value_counts()

# Combine counts from all datasets
combined_report_types = report_types_daily.add(report_types_hourly, fill_value=0)
combined_report_types = combined_report_types.add(report_types_three_hour, fill_value=0)

# Plot the pie chart with previous colors
plt.figure(figsize=(10, 6))
colors = plt.cm.tab10.colors  # Using tab10 colormap for consistent colors
combined_report_types.plot(kind='pie', autopct='%1.1f%%', startangle=90, colors=colors)

# Add a legend
plt.legend(combined_report_types.index, title='Weather Report Types', loc='center left', bbox_to_anchor=(1, 0.5))

plt.title('Distribution of Weather Report Types')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()